name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  POSTGRES_VERSION: '16'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run flake8
        run: flake8 apps config --max-line-length=120 --exclude=migrations,__pycache__

      - name: Check code formatting with black
        run: black --check apps config --exclude migrations

      - name: Check import sorting with isort
        run: isort --check-only apps config --skip migrations

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "DEBUG=True" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DB_NAME=test_db" >> .env
          echo "DB_USER=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests with coverage
        run: pytest --cov --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/morel-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/morel-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/morel-api:buildcache,mode=max

  deploy:
    name: Deploy to VPS with Ansible
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create Ansible inventory
        run: |
          mkdir -p deployment
          cat > deployment/inventory.ini << EOF
          [production]
          ${{ secrets.VPS_HOST }} ansible_user=${{ secrets.VPS_USERNAME }} ansible_port=${{ secrets.VPS_PORT }}
          
          [production:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_ssh_private_key_file=/tmp/deploy_key
          docker_username=${{ secrets.DOCKER_USERNAME }}
          docker_password=${{ secrets.DOCKER_PASSWORD }}
          app_url=${{ secrets.APP_URL }}
          EOF

      - name: Create SSH key file
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

      - name: Add VPS to known_hosts
        run: |
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create Ansible variables file
        run: |
          cat > deployment/vars.yml << EOF
          ---
          secret_key: "${{ secrets.DJANGO_SECRET_KEY }}"
          db_name: "${{ secrets.DB_NAME }}"
          db_user: "${{ secrets.DB_USER }}"
          db_password: "${{ secrets.DB_PASSWORD }}"
          allowed_hosts: "${{ secrets.ALLOWED_HOSTS }}"
          cors_origins: "${{ secrets.CORS_ORIGINS }}"
          email_host: "${{ secrets.EMAIL_HOST }}"
          email_port: "${{ secrets.EMAIL_PORT }}"
          email_user: "${{ secrets.EMAIL_USER }}"
          email_password: "${{ secrets.EMAIL_PASSWORD }}"
          EOF

      - name: Test Ansible connection
        run: |
          ansible -i deployment/inventory.ini production -m ping

      - name: Run Ansible deployment playbook
        run: |
          ansible-playbook -i deployment/inventory.ini deployment/deploy.yml \
            -e "docker_image=${{ secrets.DOCKER_USERNAME }}/morel-api:latest" \
            -e "@deployment/vars.yml" \
            --verbose

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f /tmp/deploy_key
          rm -f deployment/inventory.ini
          rm -f deployment/vars.yml

      - name: Health check
        run: |
          sleep 15
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }}/health/)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed!"
            curl -s ${{ secrets.APP_URL }}/health/ | jq .
          else
            echo "❌ Health check failed with status code: $response"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "🚀 Deployment successful to ${{ secrets.APP_URL }}"
          else
            echo "❌ Deployment failed"
          fi
